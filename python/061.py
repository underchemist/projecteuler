"""
Project Euler Problem 61
========================

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
are all figurate (polygonal) numbers and are generated by the following
formulae:

Triangle     P[3,n]=n(n+1)/2    1, 3, 6, 10, 15, ...
Square       P[4,n]=n^2         1, 4, 9, 16, 25, ...
Pentagonal   P[5,n]=n(3n-1)/2   1, 5, 12, 22, 35, ...
Hexagonal    P[6,n]=n(2n-1)     1, 6, 15, 28, 45, ...
Heptagonal   P[7,n]=n(5n-3)/2   1, 7, 18, 34, 55, ...
Octagonal    P[8,n]=n(3n-2)     1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

 1. The set is cyclic, in that the last two digits of each number is the
    first two digits of the next number (including the last number with
    the first).
 2. Each polygonal type: triangle (P[3,127]=8128), square (P[4,91]=8281),
    and pentagonal (P[5,44]=2882), is represented by a different number in
    the set.
 3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for
which each polygonal type: triangle, square, pentagonal, hexagonal,
heptagonal, and octagonal, is represented by a different number in the
set.
"""
def triangle(n):
    """docstring for triangle"""
    return int((n*(n+1))/2)

def square(n):
    return int(n*n)

def pentagonal(n):
    """docstring for pentagonal"""
    return int((n*(3*n-1))/2)

def hexagonal(n):
    """docstring for hexagonal"""
    return int((n*(2*n-1)))

def heptagonal(n):
    """docstring for heptagonal"""
    return int((n*(5*n-3))/2)

def octagonal(n):
    """docstring for octagonal"""
    return int((n*(3*n-2)))


if __name__=='__main__':
    MAX_LIMIT = 1000
    Tri = [triangle(n) for n in range(MAX_LIMIT) if triangle(n) < 9999 and triangle(n) > 100]
    Squ = [square(n) for n in range(MAX_LIMIT) if square(n) < 9999 and square(n) > 100]
    Pen = [pentagonal(n) for n in range(MAX_LIMIT) if pentagonal(n) < 9999 and pentagonal(n) > 100]
    Hex = [hexagonal(n) for n in range(MAX_LIMIT) if hexagonal(n) < 9999 and hexagonal(n) > 100]
    Hep = [heptagonal(n) for n in range(MAX_LIMIT) if heptagonal(n) < 9999 and heptagonal(n) > 100]
    Oct = [octagonal(n) for n in range(MAX_LIMIT) if octagonal(n) < 9999 and octagonal(n) > 100]


